Git 命令大全
************************************************************************************
· Git 安装
************************************************************************************
 - linux
    $ sudo apt-get install git
- Max OS X
    方法一：用homebrew http://brew.sh/
    方法二：从AppStore安装Xcode
- Windows
    1. 下载msysgit ： https://git-for-windows.github.io
    2. 安装菜单：git>Git Bash, 命令行
        $ git config --global user.name "Your Name"
        $ git config --global user.email "email@example.com"


************************************************************************************
· 创建版本库repository
************************************************************************************    
    1. 创建并进入目录 exampledir
    2. 初始化：
        $ git init
    3. 把文件添加到版本库
        在exampledir目录下
        $ git add filename.xxx
        $ git commit -m "description of this commit"  


****************************************************************
版本控制
****************************************************************
    -  获取版本库当前状态（增删改等等）
     $ git status   
    - 查看指定文件的改动部分
     $ git diff filename.xxx  
    - 查看commit历史记录
      $ git log
      $ git log --pretty=oneline  
      $ git log --graph --pretty=oneline --abbrev-commit
    - 版本回退
      $ git reset --hard HEAD^      // 退回到第一个版本
      $ git reset --hard HEAD^50    // 退回到第50个版本
      $ git reset --hard 88215ef    // 退回到指定版本号的版本（在log里查看版本号）
    - 查看命令记录历史
      $git reflog     //记录你的每一次命令
    - 撤销修改/切换分支
      $ git checkout -- filename.xxx
      $ git checkout branchname
    - 删除文件
      $ rm test.txt
      $ git commit -m "remove test.txt"
      $ git checkout -- test.txt      //误删恢复

****************************************************************
远程仓库
****************************************************************
    1. 注册GitHub账号 github.com
    2. $ ssh-keygen -t rsa -C "imliuye@163.com" 
    3. GitHub.com > account setting > SSH Keys > Add SSH Key
    4. 添加远程库：
        - 右上角+号 > create a new repo > 填写repo name
        - $ git remote add reponame git@github.com:imliuye/learngit.git
            // reponame 随便起
        - $ git push -u reponame master     //本地内容推送到远程
    5. 从远程库克隆到本地    
        - $ git clone git@github.com:imliuye/reponame.git
    6. 从远程库pull下来
        $ git pull  先用git
        - pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：
****************************************************************
分支管理
****************************************************************
    - 主分支 master分支
    - 创建并切换到dev分支
        $ git checkout -b dev
        // 修改各种文件并提交
    - 切换分支，切换到master
        $ git branch master
    -  回到主分支上并merge
        $ git merge dev

    - 删除dev branch
         $ git branch -d dev

    - 解决冲突: Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容
        自行解决后add并commit

    - 分支管理策略
        · Fast forward ： git merge dev
        · 强制禁用Fast： $ git merge --no-ff -m "merge with no-ff" dev

    - Bug分支
        · 问题描述： 你手上有dev的工作1天后才能提交，但是bug需要2小时内解决
        · Git提供stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作
        · dev上
            - $ git stash
        · 在Master创建bugfix，修复bug并提交
        · git stash list    //查看stash列表
        · 恢复
            - 用git stash apply恢复，恢复后，需要用git stash drop来删除
            - git stash pop 恢复的同时，把stash删除

    - 多人写作
        步骤如下：
        1. 试图用git push origin branch-name推送自己的修改；
            1.1 推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
            1.2 如果合并有冲突，则解决冲突，并在本地提交；
        2. 没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
            2.2 如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。

        · 查看远程库
            $ git remote
        · 把master分支上的所有本地提交推送到远程库
            $ git push origin master    // 把该分支上的所有本地提交推送到远程库
        · $ git checkout -b dev origin/dev
          $ git push origin dev 


****************************************************************
标签管理
****************************************************************
    1. 创建标签
        - 切换到需要打标签的分支上
    2. 打一个新标签：git tag <name> 
        $ git tag v1.0
    3. 看所有标签
       $ git tag
    4. 给过去某个commit打标签需要知道版本号
        $ git tag v0.9 6224937
    5. 还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：
        $ git tag -a v0.1 -m "version 0.1 released" 3628164      
    6.可以通过-s用私钥签名一个标签：
        $ git tag -s v0.2 -m "signed version 0.2 released" fec145a
    7. 删除标签
        $ git tag -d v0.1
    8. 推送标签到远程
        $ git push origin v1.0  //推送某个标签
        $ git push origin --tags    //推送全部标签
    9. 删除远程标签
        - $ git tag -d v0.9 //先从本地删除：
        - $ git push origin :refs/tags/v0.9 //再删除远程








